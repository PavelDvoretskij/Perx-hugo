// Разрешения экранов
$sm: 576px;
$md: 768px;
$lg: 992px;
$xl: 1200px;
$xxl: 1400px;

@mixin wrapper($max, $m, $d) {
  padding: 0 $m + px;
  @media screen and (min-width: $sm) and (max-width: $md - 1) {
    padding: 0 (($d - $m) / 100 * 25) + $m + px;
  }
  @media screen and (min-width: $md) and (max-width: $lg - 1) {
    padding: 0 (($d - $m) / 100 * 50) + $m + px;
  }
  @media screen and (min-width: $lg) and (max-width: $xl - 1) {
    padding: 0 (($d - $m) / 100 * 75) + $m + px;
  }
  @media screen and (min-width: $xl) {
    padding: 0 $d + px;
  }
  max-width: $max + px;
  margin: 0 auto;
}



// Шрифты
@mixin font($name, $urlName, $weight, $style: normal) {
  @font-face {
    font-family: $name;
    font-style: $style;
    font-weight: #{$weight};
    src: url('../fonts/#{$urlName}.woff2') format('woff2'),
    url('../fonts/#{$urlName}.woff') format('woff')
  }
}

@mixin styles($name, $e, $n,) {
      #{$name}: $e + px;
  @media screen and (min-width: $sm) and (max-width: $md - 1) {
      #{$name}: (($n - $e) / 100 * 25) + $e + px;
  }
  @media screen and (min-width: $md) and (max-width: $lg - 1) {
      #{$name}: (($n - $e) / 100 * 50) + $e + px;
  }
  @media screen and (min-width: $lg) and (max-width: $xl - 1) {
      #{$name}: (($n - $e) / 100 * 75) + $e + px;
  }
  @media screen and (min-width: $xl) {
    #{$name}: $n + px;
  }
}



// >= min_width
@mixin from($min_width) {
  @media screen and (min-width: $min_width) {
    @content;
  }
}

@mixin xxl {
  @media screen and (min-width: $xxl) {
    @content;
  }
}

@mixin xl {
  @media screen and (min-width: $xl) {
    @content;
  }
}

@mixin lg {
  @media screen and (min-width: $lg) {
    @content;
  }
}

@mixin md {
  @media screen and (min-width: $md) {
    @content;
  }
}

@mixin sm {
  @media screen and (min-width: $sm) {
    @content;
  }
}


// <= max_width
@mixin to($max_width) {
  @media screen and (max-width: $max_width) {
    @content;
  }
}

@mixin to-xxl {
  @media screen and (max-width: 1399px) {
    @content;
  }
}

@mixin to-xl {
  @media screen and (max-width: 1199px) {
    @content;
  }
}

@mixin to-lg {
  @media screen and (max-width: 991px) {
    @content;
  }
}

@mixin to-md {
  @media screen and (max-width: 767px) {
    @content;
  }
}

@mixin to-sm {
  @media screen and (max-width: 575px) {
    @content;
  }
}

// от min_width до max_width
@mixin from-to($min_width, $max_width) {
  @media screen and (min-width: $min_width) and (max-width: $max_width) {
    @content;
  }
}

// from-to-sm
@mixin from-to-sm-md {
  @media screen and (min-width: $sm) and (max-width: $md) {
    @content;
  }
}

@mixin from-to-sm-lg {
  @media screen and (min-width: $sm) and (max-width: $lg) {
    @content;
  }
}

@mixin from-to-sm-xl {
  @media screen and (min-width: $sm) and (max-width: $xl) {
    @content;
  }
}

@mixin from-to-sm-xxl {
  @media screen and (min-width: $sm) and (max-width: $xxl) {
    @content;
  }
}


// from-to-md
@mixin from-to-md-lg {
  @media screen and (min-width: $md) and (max-width: $lg) {
    @content;
  }
}

@mixin from-to-md-xl {
  @media screen and (min-width: $md) and (max-width: $xl) {
    @content;
  }
}

@mixin from-to-md-xxl {
  @media screen and (min-width: $md) and (max-width: $xxl) {
    @content;
  }
}

// from-to-lg
@mixin from-to-lg-xl {
  @media screen and (min-width: $lg) and (max-width: $xl) {
    @content;
  }
}

@mixin from-to-lg-xxl {
  @media screen and (min-width: $lg) and (max-width: $xxl) {
    @content;
  }
}

// from-to-xl
@mixin from-to-xl-xxl {
  @media screen and (min-width: $xl) and (max-width: $xxl) {
    @content;
  }
}


$columns: 12;
$atom: (100% / $columns);

$offset: 10px;

$offset_one_side: ($offset / 2);

$fields: 0px;
$fields_md: 20px;

@mixin row-offsets() {
  margin-left: ($offset_one_side * -1);
  margin-right: ($offset_one_side * -1);
}

@mixin col-offsets($type) {
  #{$type}-left: $offset_one_side;
  #{$type}-right: $offset_one_side;
}


@mixin row-flex() {
  display: flex;
  flex-wrap: wrap;
  @include row-offsets();
}


@mixin col() {
  box-sizing: border-box;
  word-wrap: break-word;
  @include col-offsets(margin);
}


@mixin size($n) {
  $val: (100% / $columns * $n);
  width: #{(#{$val} - #{$offset})};
}






